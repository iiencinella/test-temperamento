---
interface Option {
  clave: string;
  texto: string;
}

interface Props {
  question: string;
  options: Option[];
  currentQuestion: number;
  totalQuestions: number;
}

const { question, options, currentQuestion, totalQuestions } = Astro.props;
---

<div class="question-card">
  <div class="progress">
    Pregunta {currentQuestion + 1} de {totalQuestions}
  </div>
  <h2>{question}</h2>
  <div class="options">
    {
      options.map((option) => (
        <label class="option">
          <input
            type="radio"
            name={`question-${currentQuestion}`}
            value={option.clave}
          />
          <span class="option-text">{option.texto}</span>
        </label>
      ))
    }
  </div>
  <button class="next-btn" disabled>Siguiente</button>
</div>

<style>
  .next-btn {
    width: 100%;
    padding: 1rem;
    background: #4c6ef5;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-top: 1.5rem;
  }

  .next-btn:hover:not(:disabled) {
    background: #364fc7;
  }

  .next-btn:disabled {
    background: #adb5bd;
    cursor: not-allowed;
  }
  .question-card {
    background: #fff;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    margin: 2rem auto;
  }

  .progress {
    color: #666;
    margin-bottom: 1rem;
    font-size: 0.9rem;
  }

  h2 {
    color: #333;
    margin-bottom: 2rem;
    font-size: 1.5rem;
  }

  .options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .option {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .option:hover {
    background: #f8f9fa;
    border-color: #adb5bd;
  }

  input[type="radio"] {
    margin-top: 0.3rem;
  }

  .option-text {
    line-height: 1.5;
    color: #495057;
  }
</style>

<script>
  function setupQuestionCard() {
    const options = document.querySelectorAll<HTMLInputElement>('input[type="radio"]');
    const nextBtn = document.querySelector<HTMLButtonElement>('.next-btn');

    if (!options || !nextBtn) return;

    const enableNextButton = () => {
      nextBtn.removeAttribute('disabled');
    };

    // Manejar la selección de opciones
    options.forEach(option => {
      option.addEventListener('change', enableNextButton);
    });

    // Manejar el click en el botón siguiente
    nextBtn.addEventListener('click', () => {
      const selectedOption = Array.from(options).find(radio => radio.checked);
      if (selectedOption) {
        // Emitir un evento personalizado con la respuesta seleccionada
        const event = new CustomEvent('nextQuestion', {
          detail: {
            answer: selectedOption.value,
            questionIndex: selectedOption.name.split('-')[1]
          }
        });
        document.dispatchEvent(event);
      }
    });

    // Verificar si ya hay una opción seleccionada
    const hasSelectedOption = Array.from(options).some(radio => radio.checked);
    if (hasSelectedOption) {
      enableNextButton();
    }
  }

  // Configurar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', setupQuestionCard);
  // También configurar cuando el componente se monte dinámicamente
  setupQuestionCard();
</script>
